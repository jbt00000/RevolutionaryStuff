create schema db;

GO

CREATE TABLE db.[ChangeLog]
(
	ChangeLogId int not null identity primary key,
	[EventType] [varchar](50) NOT NULL,
	[ObjectName] [varchar](256) NOT NULL,
	[ObjectType] [varchar](25) NOT NULL,
	[SqlCommand] [varchar](max) NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[LoginName] [varchar](256) NOT NULL,
	[Data] [xml] NULL
) 

GO

CREATE trigger [ChangeLogTrigger]
on database
for
	ADD_ROLE_MEMBER, DROP_ROLE_MEMBER,
	ADD_SIGNATURE, DROP_SIGNATURE,
	ADD_SIGNATURE_SCHEMA_OBJECT, DROP_SIGNATURE_SCHEMA_OBJECT,
	ALTER_APPLICATION_ROLE, ALTER_ASSEMBLY, 
	ALTER_AUTHORIZATION_DATABASE,
	ALTER_BROKER_PRIORITY, 
	ALTER_CERTIFICATE,
	ALTER_DATABASE_ENCRYPTION_KEY,
	ALTER_EXTENDED_PROPERTY, 
	ALTER_FULLTEXT_CATALOG, 
	ALTER_FULLTEXT_INDEX, 
	ALTER_FULLTEXT_STOPLIST,
	ALTER_FUNCTION,
	ALTER_INDEX,
	ALTER_MASTER_KEY, 
	ALTER_MESSAGE_TYPE,
	ALTER_PARTITION_FUNCTION, 
	ALTER_PARTITION_SCHEME,
	ALTER_PROCEDURE,
	ALTER_QUEUE,
	ALTER_REMOTE_SERVICE_BINDING,
	ALTER_ROUTE,
	ALTER_SEARCH_PROPERTY_LIST,
	ALTER_SERVICE,
	ALTER_SYMMETRIC_KEY,
	ALTER_TABLE,
	ALTER_TRIGGER,
	ALTER_VIEW,
	ALTER_XML_SCHEMA_COLLECTION,
	BIND_DEFAULT, UNBIND_DEFAULT,
	BIND_RULE,
	CREATE_APPLICATION_ROLE, DROP_APPLICATION_ROLE,
	CREATE_ASSEMBLY, DROP_ASSEMBLY,
	CREATE_BROKER_PRIORITY, DROP_BROKER_PRIORITY,
	CREATE_CERTIFICATE, DROP_CERTIFICATE,
	CREATE_CONTRACT, DROP_CONTRACT,
	CREATE_DATABASE_ENCRYPTION_KEY, DROP_DATABASE_ENCRYPTION_KEY,
	CREATE_DEFAULT, DROP_DEFAULT,
	CREATE_EVENT_NOTIFICATION, DROP_EVENT_NOTIFICATION,
	CREATE_EXTENDED_PROPERTY, DROP_EXTENDED_PROPERTY,
	CREATE_FULLTEXT_CATALOG, DROP_FULLTEXT_CATALOG,
	CREATE_FULLTEXT_INDEX, DROP_FULLTEXT_INDEX,
	CREATE_FULLTEXT_STOPLIST, DROP_FULLTEXT_STOPLIST,
	CREATE_FUNCTION, DROP_FUNCTION,
	CREATE_INDEX, DROP_INDEX,
	CREATE_MASTER_KEY, DROP_MASTER_KEY,
	CREATE_MESSAGE_TYPE, DROP_MESSAGE_TYPE,
	CREATE_PARTITION_FUNCTION, DROP_PARTITION_FUNCTION,
	CREATE_PARTITION_SCHEME, DROP_PARTITION_SCHEME,
	CREATE_PLAN_GUIDE,
	CREATE_PROCEDURE, DROP_PROCEDURE,
	CREATE_QUEUE, DROP_QUEUE,
	CREATE_REMOTE_SERVICE_BINDING, DROP_REMOTE_SERVICE_BINDING,
	CREATE_ROLE,
	CREATE_ROUTE, DROP_ROUTE,
	CREATE_RULE, DROP_RULE,
	CREATE_SCHEMA, DROP_SCHEMA,
	CREATE_SEARCH_PROPERTY_LIST, DROP_SEARCH_PROPERTY_LIST,
	CREATE_SECURITY_POLICY, ALTER_SECURITY_POLICY, DROP_SECURITY_POLICY,
	CREATE_SEQUENCE, ALTER_SEQUENCE, DROP_SEQUENCE,
	CREATE_SERVICE, DROP_SERVICE,
	CREATE_SPATIAL_INDEX,
	CREATE_STATISTICS, DROP_STATISTICS, UPDATE_STATISTICS,
	CREATE_SYMMETRIC_KEY, DROP_SYMMETRIC_KEY,
	CREATE_SYNONYM, DROP_SYNONYM,
	CREATE_TABLE, DROP_TABLE,
	CREATE_TRIGGER, DROP_TRIGGER,
	CREATE_TYPE,
	CREATE_USER, ALTER_USER, DROP_USER,
	CREATE_VIEW, DROP_VIEW,
	CREATE_XML_INDEX,
	CREATE_XML_SCHEMA_COLLECTION, DROP_XML_SCHEMA_COLLECTION,
	DENY_DATABASE, GRANT_DATABASE, REVOKE_DATABASE,
	RENAME
AS

SET ANSI_PADDING ON

/*
IDNS = In docs, not supported in database
ICID = Incorrectly in docs
M = In docs multiple times

https://msdn.microsoft.com/en-us/library/bb522542.aspx
http://www.sqlteam.com/article/using-ddl-triggers-in-sql-server-2005-to-capture-schema-changes
*/

set nocount on

declare @data xml
set @data = EVENTDATA()

if (@data is not null)
begin

	insert into db.ChangeLog(eventtype, objectname, objecttype, sqlcommand, eventdate, loginname, data)
	select 
		@data.value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(50)'), 
		@data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'varchar(256)'), 
		@data.value('(/EVENT_INSTANCE/ObjectType)[1]', 'varchar(25)'), 
		@data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'varchar(max)'), 
		getutcdate(),
		@data.value('(/EVENT_INSTANCE/LoginName)[1]', 'varchar(256)'),
		@data
	where
		@data.value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(50)') is not null and
		@data.value('(/EVENT_INSTANCE/ObjectName)[1]', 'varchar(256)') is not null and
		@data.value('(/EVENT_INSTANCE/ObjectType)[1]', 'varchar(25)') is not null and
		@data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'varchar(max)') is not null and
		@data.value('(/EVENT_INSTANCE/LoginName)[1]', 'varchar(256)') is not null and
		@data.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'varchar(max)') <> '--ENCRYPTED--'

end


GO
ENABLE TRIGGER [ChangeLogTrigger] ON DATABASE
GO

CREATE TRIGGER [db].[ChangeLogInsertOnly]
ON [db].[ChangeLog] 
for delete, update
AS

	ROLLBACK TRAN
	raiserror('DatabaseChangeLog is a log table.  Items cannot be deleted or changed', 16, 1)

GO

ALTER TABLE [db].[ChangeLog] ENABLE TRIGGER [ChangeLogInsertOnly]
GO
